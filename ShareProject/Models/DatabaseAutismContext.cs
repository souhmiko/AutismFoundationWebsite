// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace ShareProject.Models
{
    public partial class DatabaseAutismContext
    {
        public DatabaseAutismContext()
        {
        }

        public DatabaseAutismContext(DbContextOptions<DatabaseAutismContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AgeRange> AgeRange { get; set; }
        public virtual DbSet<AspNetRoleClaims> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserTokens> AspNetUserTokens { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<BlogPost> BlogPost { get; set; }
        public virtual DbSet<BlogPostMeta> BlogPostMeta { get; set; }
        public virtual DbSet<BlogUser> BlogUser { get; set; }
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<EmployAsd> EmployAsd { get; set; }
        public virtual DbSet<EmployLearning> EmployLearning { get; set; }
        public virtual DbSet<EmployTraining> EmployTraining { get; set; }
        public virtual DbSet<Employer> Employer { get; set; }
        public virtual DbSet<Employment> Employment { get; set; }
        public virtual DbSet<Language> Language { get; set; }
        public virtual DbSet<PostComment> PostComment { get; set; }
        public virtual DbSet<Publication> Publication { get; set; }
        public virtual DbSet<Resource> Resource { get; set; }
        public virtual DbSet<ResourceAgeRange> ResourceAgeRange { get; set; }
        public virtual DbSet<ResourceAttachment> ResourceAttachment { get; set; }
        public virtual DbSet<ResourceCategory> ResourceCategory { get; set; }
        public virtual DbSet<ResourceTag> ResourceTag { get; set; }
        public virtual DbSet<Tag> Tag { get; set; }
        public virtual DbSet<Tagpost> Tagpost { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Scaffolding:ConnectionString", "Data Source=(local);Initial Catalog=DatabaseAutism;Integrated Security=true");

            modelBuilder.Entity<AgeRange>(entity =>
            {
                entity.ToTable("Age.Range");

                entity.Property(e => e.AgeRange1).HasColumnName("AgeRange");

                entity.HasOne(d => d.AgeRange1Navigation)
                    .WithMany(p => p.AgeRange)
                    .HasForeignKey(d => d.AgeRange1)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Age.Range_ToResourceAgeRange");
            });

            modelBuilder.Entity<AspNetRoleClaims>(entity =>
            {
                entity.Property(e => e.RoleId)
                    .IsRequired()
                    .HasMaxLength(450);

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.AspNetRoleClaims)
                    .HasForeignKey(d => d.RoleId);
            });

            modelBuilder.Entity<AspNetRoles>(entity =>
            {
                entity.Property(e => e.Name).HasMaxLength(256);

                entity.Property(e => e.NormalizedName).HasMaxLength(256);
            });

            modelBuilder.Entity<AspNetUserClaims>(entity =>
            {
                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(450);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserClaims)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUserLogins>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(450);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserLogins)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUserTokens>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserTokens)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUsers>(entity =>
            {
                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.NormalizedEmail).HasMaxLength(256);

                entity.Property(e => e.NormalizedUserName).HasMaxLength(256);

                entity.Property(e => e.UserName).HasMaxLength(256);

                entity.HasMany(d => d.Role)
                    .WithMany(p => p.User)
                    .UsingEntity<Dictionary<string, object>>(
                        "AspNetUserRoles",
                        l => l.HasOne<AspNetRoles>().WithMany().HasForeignKey("RoleId"),
                        r => r.HasOne<AspNetUsers>().WithMany().HasForeignKey("UserId"),
                        j =>
                        {
                            j.HasKey("UserId", "RoleId");

                            j.ToTable("AspNetUserRoles");
                        });
            });

            modelBuilder.Entity<BlogPost>(entity =>
            {
                entity.Property(e => e.Content)
                    .HasColumnType("text")
                    .HasColumnName("content");

                entity.Property(e => e.CreatedAtdate)
                    .HasColumnType("datetime")
                    .HasColumnName("createdAtdate");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.Property(e => e.Publised).HasColumnName("publised");

                entity.Property(e => e.PublisedAtdate)
                    .HasColumnType("datetime")
                    .HasColumnName("publisedAtdate");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("title");

                entity.Property(e => e.UpdatedAtdate)
                    .HasColumnType("datetime")
                    .HasColumnName("updatedAtdate");

                entity.HasOne(d => d.Author)
                    .WithMany(p => p.BlogPost)
                    .HasForeignKey(d => d.AuthorId)
                    .HasConstraintName("FK_BlogPost_ToBlogUser");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_BlogPost_ToBlogPost");
            });

            modelBuilder.Entity<BlogPostMeta>(entity =>
            {
                entity.ToTable("BlogPost_meta");

                entity.HasIndex(e => e.Key, "AK_BlogPost_meta_post_Id")
                    .IsUnique();

                entity.Property(e => e.Content)
                    .HasColumnType("text")
                    .HasColumnName("content");

                entity.Property(e => e.Key)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("key");

                entity.Property(e => e.PostId).HasColumnName("post_Id");

                entity.HasOne(d => d.Post)
                    .WithMany(p => p.BlogPostMeta)
                    .HasForeignKey(d => d.PostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BlogPost_meta_BlogPost");
            });

            modelBuilder.Entity<BlogUser>(entity =>
            {
                entity.Property(e => e.AspnetuserId)
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnName("aspnetuserID");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnType("ntext")
                    .HasColumnName("email");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Intro)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MobileNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("password")
                    .IsFixedLength();

                entity.Property(e => e.Profile)
                    .IsRequired()
                    .HasColumnType("ntext")
                    .HasColumnName("profile");

                entity.Property(e => e.RegDate).HasColumnType("datetime");

                entity.HasOne(d => d.Aspnetuser)
                    .WithMany(p => p.BlogUser)
                    .HasForeignKey(d => d.AspnetuserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_ToTable");
            });

            modelBuilder.Entity<Category>(entity =>
            {
                entity.ToTable("category");

                entity.HasIndex(e => e.ParentId, "IX_category_parent");

                entity.Property(e => e.Content)
                    .HasColumnType("text")
                    .HasColumnName("content");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("title");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_category_parent");

                entity.HasMany(d => d.Post)
                    .WithMany(p => p.Category)
                    .UsingEntity<Dictionary<string, object>>(
                        "PostCategory",
                        l => l.HasOne<BlogPost>().WithMany().HasForeignKey("PostId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_post_category_BlogPost"),
                        r => r.HasOne<Category>().WithMany().HasForeignKey("CategoryId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_post_category_category"),
                        j =>
                        {
                            j.HasKey("CategoryId", "PostId");

                            j.ToTable("post_category");

                            j.IndexerProperty<long>("CategoryId").HasColumnName("categoryId");

                            j.IndexerProperty<long>("PostId").HasColumnName("postId");
                        });
            });

            modelBuilder.Entity<EmployAsd>(entity =>
            {
                entity.ToTable("Employ.ASD");

                entity.Property(e => e.Asdid).HasColumnName("ASDID");

                entity.Property(e => e.Name)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.HasOne(d => d.Asd)
                    .WithMany(p => p.EmployAsd)
                    .HasForeignKey(d => d.Asdid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Employ.ASD_ToEmployment");
            });

            modelBuilder.Entity<EmployLearning>(entity =>
            {
                entity.ToTable("Employ.Learning");

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.Location).HasMaxLength(100);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.StarDate).HasColumnType("date");
            });

            modelBuilder.Entity<EmployTraining>(entity =>
            {
                entity.ToTable("Employ.Training");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Employer>(entity =>
            {
                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("address");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("email");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("ntext")
                    .HasColumnName("name");

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Employment>(entity =>
            {
                entity.Property(e => e.Name).HasColumnType("ntext");

                entity.HasOne(d => d.EmployLearning)
                    .WithMany(p => p.Employment)
                    .HasForeignKey(d => d.EmployLearningId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Employment_ToEmploy.Learning");

                entity.HasOne(d => d.EmployTrain)
                    .WithMany(p => p.Employment)
                    .HasForeignKey(d => d.EmployTrainId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Employment_ToEmploy.Training");

                entity.HasOne(d => d.EmployasdNavigation)
                    .WithMany(p => p.Employment)
                    .HasForeignKey(d => d.Employasd)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Employment_ToEmploy.ASD");

                entity.HasOne(d => d.Employer)
                    .WithMany(p => p.Employment)
                    .HasForeignKey(d => d.EmployerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Employment_ToEmployer");

                entity.HasOne(d => d.EmployerNavigation)
                    .WithMany(p => p.InverseEmployerNavigation)
                    .HasForeignKey(d => d.EmployerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Employment_ToEmployment");
            });

            modelBuilder.Entity<Language>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<PostComment>(entity =>
            {
                entity.ToTable("post_comment");

                entity.Property(e => e.Content)
                    .HasColumnType("text")
                    .HasColumnName("content");

                entity.Property(e => e.CreatedAtdate)
                    .HasColumnType("datetime")
                    .HasColumnName("createdAtdate");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.Property(e => e.PostId).HasColumnName("postId");

                entity.Property(e => e.Published).HasColumnName("published");

                entity.Property(e => e.PublishedAtdate)
                    .HasColumnType("datetime")
                    .HasColumnName("publishedAtdate");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("title");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_post_comment_Topost_comment");

                entity.HasOne(d => d.Post)
                    .WithMany(p => p.PostComment)
                    .HasForeignKey(d => d.PostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_post_comment_ToBlogPost");
            });

            modelBuilder.Entity<Publication>(entity =>
            {
                entity.Property(e => e.AuthorName)
                    .HasMaxLength(10)
                    .HasColumnName("authorName")
                    .IsFixedLength();

                entity.Property(e => e.BookCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("bookCode")
                    .IsFixedLength();

                entity.Property(e => e.BookTitle).HasColumnName("bookTitle");

                entity.Property(e => e.Content)
                    .IsRequired()
                    .HasColumnName("content");

                entity.Property(e => e.EbookCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("ebookCode")
                    .IsFixedLength();
            });

            modelBuilder.Entity<Resource>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Name ");

                entity.Property(e => e.ResCategoryId).HasColumnName("Res_CategoryId");

                entity.HasOne(d => d.ResCategory)
                    .WithMany(p => p.Resource)
                    .HasForeignKey(d => d.ResCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Resource_ToResourceCategory");
            });

            modelBuilder.Entity<ResourceAgeRange>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<ResourceAttachment>(entity =>
            {
                entity.Property(e => e.FileName).IsRequired();

                entity.Property(e => e.FilePath).IsRequired();

                entity.HasOne(d => d.Age)
                    .WithMany(p => p.ResourceAttachment)
                    .HasForeignKey(d => d.AgeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ResourceAttachment_ToResourceAgeRange");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.ResourceAttachment)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ResourceAttachment_ToLanguage");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ResourceAttachment)
                    .HasForeignKey(d => d.ResourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ResourceAttachment_ToResource");
            });

            modelBuilder.Entity<ResourceCategory>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<ResourceTag>(entity =>
            {
                entity.Property(e => e.TagName)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("Tag_Name");

                entity.HasOne(d => d.Tag)
                    .WithMany(p => p.ResourceTag)
                    .HasForeignKey(d => d.TagId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ResourceTag_ToResourceCategory");
            });

            modelBuilder.Entity<Tag>(entity =>
            {
                entity.Property(e => e.Content)
                    .IsRequired()
                    .HasColumnType("ntext")
                    .HasColumnName("content");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasColumnName("name");

                entity.Property(e => e.Title).HasMaxLength(100);
            });

            modelBuilder.Entity<Tagpost>(entity =>
            {
                entity.ToTable("tagpost");

                entity.Property(e => e.PostId).HasColumnName("post_Id");

                entity.Property(e => e.TagId).HasColumnName("tag_Id");

                entity.HasOne(d => d.Post)
                    .WithMany(p => p.Tagpost)
                    .HasForeignKey(d => d.PostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tagpost_ToBlogPost");

                entity.HasOne(d => d.Tag)
                    .WithMany(p => p.Tagpost)
                    .HasForeignKey(d => d.TagId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tagpost_ToTag");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}